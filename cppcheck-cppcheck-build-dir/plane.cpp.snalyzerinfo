typeToString
typeToIconString
operator< call:[size]
replace_substring call:[assert,empty,find,replace,size]
escape call:[replace_substring]
unescape call:[replace_substring] noreturn:[replace_substring]
operatorlong
make_array call:[sizeof...]
conditional_static_cast
conditional_static_cast
test
test
test
test
test call:[test] noreturn:[test]
test
value_in_range_of call:[test] noreturn:[test]
is_c_string call:[return]
is_transparent
concat_length
concat_length call:[concat_length] noreturn:[concat_length]
concat_length call:[concat_length,strlen] noreturn:[concat_length]
concat_length call:[concat_length,size] noreturn:[concat_length]
concat_into
concat_into call:[append,concat_into] noreturn:[concat_into]
concat_into call:[concat_into] noreturn:[concat_into]
concat_into call:[append,begin,concat_into,end] noreturn:[concat_into]
concat_into call:[append,concat_into,data,size] noreturn:[concat_into]
concat call:[concat_into,concat_length,reserve]
what call:[what] noreturn:[what]
exception
name call:[concat,to_string] noreturn:[concat]
diagnostics
diagnostics
create call:[c_str,concat,diagnostics,name,position_string]
create call:[c_str,concat,diagnostics,name,to_string]
parse_error
position_string call:[concat,to_string] noreturn:[concat]
create call:[c_str,concat,diagnostics,name]
invalid_iterator
create call:[c_str,concat,diagnostics,name]
type_error
create call:[c_str,concat,diagnostics,name]
out_of_range
create call:[c_str,concat,diagnostics,name]
other_error
from_json call:[abort,is_null] noreturn:[abort]
get_arithmetic_value call:[abort] noreturn:[abort]
from_json call:[abort,is_boolean] noreturn:[abort]
from_json call:[abort,is_string] noreturn:[abort]
from_json call:[abort,is_string] noreturn:[abort]
from_json call:[get_arithmetic_value] noreturn:[get_arithmetic_value]
from_json call:[get_arithmetic_value] noreturn:[get_arithmetic_value]
from_json call:[get_arithmetic_value] noreturn:[get_arithmetic_value]
from_json call:[get_arithmetic_value]
from_json call:[abort,clear,front_inserter,is_array,rbegin,rend,transform] noreturn:[abort,transform]
from_json call:[abort,begin,end,is_array,resize,size,transform] noreturn:[abort,transform]
from_json call:[at]
from_json_array_impl
from_json_array_impl call:[at]
from_json_array_impl call:[begin,end,inserter,move,reserve,size,transform] noreturn:[move]
from_json_array_impl call:[begin,end,inserter,move,transform] noreturn:[move]
from_json call:[abort,from_json_array_impl,is_array] noreturn:[abort,from_json_array_impl]
from_json_inplace_array_impl call:[at]
from_json call:[abort,from_json_inplace_array_impl,is_array] noreturn:[abort,from_json_inplace_array_impl]
from_json call:[abort,is_binary] noreturn:[abort]
from_json call:[abort,begin,end,inserter,is_object,move,transform,value_type] noreturn:[abort,move,value_type]
from_json call:[abort] noreturn:[abort]
from_json_tuple_impl_base call:[at,make_tuple] noreturn:[make_tuple]
from_json_tuple_impl call:[at]
from_json_tuple_impl call:[from_json_tuple_impl] noreturn:[from_json_tuple_impl]
from_json_tuple_impl
from_json_tuple_impl
from_json call:[abort,from_json_tuple_impl,is_array] noreturn:[abort,from_json_tuple_impl]
from_json call:[abort,at,clear,emplace,is_array] noreturn:[abort,emplace]
from_json call:[abort,at,clear,emplace,is_array] noreturn:[abort,emplace]
operator() call:[from_json] noreturn:[from_json]
int_to_string call:[to_string] noreturn:[to_string]
iteration_proxy_value
operator*
operator++
operator++ call:[iteration_proxy_value]
operator==
operator!=
key call:[assert,int_to_string,key,type]
value call:[value] noreturn:[value]
iteration_proxy
begin call:[begin]
end call:[end]
get call:[key] noreturn:[key]
get call:[value] noreturn:[value]
construct call:[assert_invariant,destroy] noreturn:[assert_invariant]
construct call:[assert_invariant,destroy] noreturn:[assert_invariant]
construct call:[assert_invariant,destroy,move] noreturn:[assert_invariant]
construct call:[assert_invariant,destroy] noreturn:[assert_invariant]
construct call:[assert_invariant,binary_t,destroy] noreturn:[assert_invariant]
construct call:[assert_invariant,binary_t,destroy,move] noreturn:[assert_invariant]
construct call:[assert_invariant,destroy] noreturn:[assert_invariant]
construct call:[assert_invariant,destroy] noreturn:[assert_invariant]
construct call:[assert_invariant,destroy] noreturn:[assert_invariant]
construct call:[assert_invariant,destroy,set_parents] noreturn:[assert_invariant]
construct call:[assert_invariant,destroy,move,set_parents] noreturn:[assert_invariant]
construct call:[assert_invariant,begin,destroy,end,set_parents] noreturn:[assert_invariant]
construct call:[assert_invariant,back,destroy,push_back,reserve,set_parent,size] noreturn:[assert_invariant,set_parent]
construct call:[assert_invariant,begin,copy,destroy,end,resize,set_parents,size] noreturn:[assert_invariant,copy]
construct call:[assert_invariant,destroy,set_parents] noreturn:[assert_invariant]
construct call:[assert_invariant,destroy,move,set_parents] noreturn:[assert_invariant]
construct call:[assert_invariant,begin,destroy,end,set_parents] noreturn:[assert_invariant]
to_json call:[construct] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct,move] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct,move] noreturn:[construct]
to_json call:[construct,move] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json call:[construct,move] noreturn:[construct]
to_json call:[construct] noreturn:[construct]
to_json
to_json call:[key,value]
to_json_tuple_impl
to_json call:[to_json_tuple_impl] noreturn:[to_json_tuple_impl]
operator() call:[to_json] noreturn:[to_json]
from_json call:[from_json] noreturn:[from_json]
from_json call:[from_json] noreturn:[from_json]
to_json call:[to_json] noreturn:[to_json]
byte_container_with_subtype
byte_container_with_subtype
byte_container_with_subtype
byte_container_with_subtype
byte_container_with_subtype
operator== call:[tie] noreturn:[tie]
operator!=
set_subtype
subtype
has_subtype
clear_subtype
combine
hash call:[assert,combine,get_binary,has_subtype,hash,items,key,size,subtype,type,value] noreturn:[combine]
file_input_adapter call:[assert] noreturn:[assert]
get_character call:[fgetc] noreturn:[fgetc]
input_stream_adapter call:[clear,rdstate] noreturn:[clear]
input_stream_adapter
input_stream_adapter
get_character call:[clear,eof,rdstate,sbumpc] noreturn:[clear]
iterator_input_adapter
get_character call:[advance,eof,to_int_type] noreturn:[eof]
empty
fill_buffer call:[empty,eof,get_character]
fill_buffer call:[empty,eof,get_character]
wide_string_input_adapter
get_character call:[assert,sizeof] noreturn:[assert]
fill_buffer call:[fill_buffer] noreturn:[fill_buffer]
create call:[adapter_type,move] noreturn:[adapter_type]
create call:[adapter_type,base_adapter_type,move] noreturn:[adapter_type]
input_adapter call:[create] noreturn:[create]
create call:[begin,end,input_adapter] noreturn:[input_adapter]
input_adapter call:[create] noreturn:[create]
input_adapter call:[file_input_adapter] noreturn:[file_input_adapter]
input_adapter call:[input_stream_adapter] noreturn:[input_stream_adapter]
input_adapter call:[input_stream_adapter] noreturn:[input_stream_adapter]
input_adapter call:[input_adapter,strlen] noreturn:[input_adapter]
input_adapter call:[input_adapter] noreturn:[input_adapter]
span_input_adapter
span_input_adapter
get call:[move] noreturn:[move]
json_sax_dom_parser
null call:[handle_value]
boolean call:[handle_value]
number_integer call:[handle_value]
number_unsigned call:[handle_value]
number_float call:[handle_value]
string call:[handle_value]
binary call:[handle_value,move]
start_object call:[abort,back,handle_value,max_size,push_back] noreturn:[abort]
key call:[assert,back,empty,is_object,operator[]]
end_object call:[assert,back,empty,is_object,pop_back,set_parents]
start_array call:[abort,back,handle_value,max_size,push_back] noreturn:[abort]
end_array call:[assert,back,empty,is_array,pop_back,set_parents]
parse_error call:[abort] noreturn:[abort]
is_errored
handle_value call:[BasicJsonType,assert,back,emplace_back,empty,is_array,is_object]
json_sax_dom_callback_parser call:[push_back] noreturn:[push_back]
null call:[handle_value]
boolean call:[handle_value]
number_integer call:[handle_value]
number_unsigned call:[handle_value]
number_float call:[handle_value]
string call:[handle_value]
binary call:[handle_value,move]
start_object call:[abort,back,callback,handle_value,max_size,push_back,size] noreturn:[abort]
key call:[BasicJsonType,back,callback,operator[],push_back,size]
end_object call:[assert,back,begin,callback,empty,end,erase,is_discarded,is_structured,pop_back,set_parents,size] noreturn:[set_parents]
start_array call:[abort,back,callback,handle_value,max_size,push_back,size] noreturn:[abort]
end_array call:[assert,back,callback,empty,is_array,pop_back,set_parents,size] noreturn:[pop_back,set_parents]
parse_error call:[abort] noreturn:[abort]
is_errored
handle_value call:[BasicJsonType,assert,back,callback,emplace_back,empty,is_array,is_object,move,pop_back,size]
null
boolean
number_integer
number_unsigned
number_float
string
binary
start_object
key
end_object
start_array
end_array
parse_error
token_type_name
lexer
get_decimal_point call:[assert,localeconv,return]
get_codepoint call:[assert,get]
next_byte_in_range call:[add,assert,begin,end,get,size] noreturn:[add]
scan_string call:[add,assert,eof,get,get_codepoint,next_byte_in_range,reset] noreturn:[add]
scan_comment call:[eof,get,unget]
strtof call:[strtof] noreturn:[strtof]
strtof call:[strtod] noreturn:[strtod]
strtof call:[strtold] noreturn:[strtold]
scan_number call:[add,assert,data,get,reset,size,strtof,strtoll,strtoull,unget] noreturn:[assert]
scan_literal call:[assert,get,to_char_type]
reset call:[clear,push_back,to_char_type] noreturn:[push_back]
get call:[eof,get_character,push_back,to_char_type] noreturn:[get_character,push_back]
unget call:[assert,empty,eof,pop_back] noreturn:[pop_back]
add call:[push_back] noreturn:[push_back]
get_number_integer
get_number_unsigned
get_number_float
get_string
get_position
get_token_string call:[data,push_back,size] noreturn:[data,push_back]
get_error_message
skip_bom call:[get,unget]
skip_whitespace call:[get,while] noreturn:[get,while]
scan call:[data,eof,scan_comment,scan_literal,scan_number,scan_string,size,skip_bom,skip_whitespace] noreturn:[scan_literal,skip_whitespace]
little_endianness
binary_reader
sax_parse call:[assert,concat,create,eof,exception_message,get,get_ignore_noop,get_token_string,parse_bson_internal,parse_cbor_internal,parse_error,parse_msgpack_internal,parse_ubjson_internal] noreturn:[assert,get,get_ignore_noop,parse_error]
parse_bson_internal call:[end_object,parse_bson_element_list,start_object] noreturn:[end_object]
get_bson_cstr call:[back_inserter,get,unexpect_eof]
get_bson_string call:[concat,create,eof,exception_message,get,get_string,get_token_string,parse_error,to_string] noreturn:[eof,parse_error]
get_bson_binary call:[concat,create,exception_message,get_binary,get_token_string,parse_error,set_subtype,to_string] noreturn:[get_binary,parse_error]
parse_bson_element_internal call:[binary,boolean,concat,create,data,get,get_bson_binary,get_bson_string,null,number_float,number_integer,parse_bson_array,parse_bson_internal,parse_error,size,string] noreturn:[binary,boolean,null,number_float,number_integer,parse_bson_array,parse_bson_internal,parse_error,string]
parse_bson_element_list call:[clear,get,get_bson_cstr,key,parse_bson_element_internal,unexpect_eof] noreturn:[clear]
parse_bson_array call:[end_array,parse_bson_element_list,start_array] noreturn:[end_array]
parse_cbor_internal call:[assert,binary,boolean,concat,create,eof,exception_message,get,get_cbor_array,get_cbor_binary,get_cbor_object,get_cbor_string,get_number,get_token_string,infinity,ldexp,null,number_float,number_integer,number_unsigned,parse_cbor_internal,parse_error,quiet_NaN,return,set_subtype,string,unexpect_eof] noreturn:[binary,get_cbor_array,get_cbor_object,ldexp,number_float,number_integer,number_unsigned,parse_cbor_internal,parse_error,string]
get_cbor_string call:[append,concat,create,exception_message,get,get_cbor_string,get_number,get_string,get_token_string,parse_error,unexpect_eof] noreturn:[append,get_string,parse_error]
get_cbor_binary call:[begin,concat,create,end,exception_message,get,get_binary,get_cbor_binary,get_number,get_token_string,insert,parse_error,unexpect_eof] noreturn:[get_binary,insert,parse_error]
get_cbor_array call:[end_array,get,parse_cbor_internal,start_array] noreturn:[end_array]
get_cbor_object call:[clear,end_object,get,get_cbor_string,key,parse_cbor_internal,start_object] noreturn:[clear,end_object]
parse_msgpack_internal call:[binary,boolean,concat,create,eof,exception_message,get,get_msgpack_array,get_msgpack_binary,get_msgpack_object,get_msgpack_string,get_number,get_token_string,null,number_float,number_integer,number_unsigned,parse_error,string,unexpect_eof] noreturn:[binary,get_msgpack_array,get_msgpack_object,number_float,number_integer,number_unsigned,parse_error,string]
get_msgpack_string call:[concat,create,exception_message,get_number,get_string,get_token_string,parse_error,unexpect_eof] noreturn:[get_string,parse_error]
get_msgpack_binary call:[assign_and_return_true,get_binary,get_number,set_subtype] noreturn:[assign_and_return_true,get_binary]
get_msgpack_array call:[end_array,parse_msgpack_internal,start_array] noreturn:[end_array]
get_msgpack_object call:[clear,end_object,get,get_msgpack_string,key,parse_msgpack_internal,start_object] noreturn:[clear,end_object]
parse_ubjson_internal call:[get_ignore_noop,get_ubjson_value] noreturn:[get_ubjson_value]
get_ubjson_string call:[create,exception_message,get,get_number,get_string,get_token_string,parse_error,unexpect_eof] noreturn:[get,get_string,parse_error]
get_ubjson_ndarray_size call:[get_ignore_noop,get_ubjson_size_type,get_ubjson_size_value,push_back] noreturn:[get_ignore_noop,push_back]
get_ubjson_size_value call:[at,create,empty,end_array,exception_message,get_ignore_noop,get_number,get_token_string,get_ubjson_ndarray_size,key,number_unsigned,parse_error,size,start_array,start_object] noreturn:[end_array,get_ignore_noop,parse_error]
get_ubjson_size_type call:[begin,binary_search,concat,create,end,exception_message,get,get_ignore_noop,get_token_string,get_ubjson_size_value,parse_error,unexpect_eof] noreturn:[parse_error]
get_ubjson_value call:[assert,boolean,concat,create,eof,exception_message,get,get_number,get_token_string,get_ubjson_array,get_ubjson_high_precision_number,get_ubjson_object,get_ubjson_string,infinity,ldexp,null,number_float,number_integer,number_unsigned,parse_error,quiet_NaN,return,s,string,unexpect_eof] noreturn:[get_ubjson_high_precision_number,ldexp,number_float,number_integer,number_unsigned,parse_error,string]
get_ubjson_array call:[begin,create,end,end_array,end_object,exception_message,get_ignore_noop,get_token_string,get_ubjson_size_type,get_ubjson_value,key,lower_bound,parse_error,parse_ubjson_internal,return,start_array,string] noreturn:[end_array,get_ignore_noop,parse_error,return]
get_ubjson_object call:[clear,create,end_object,exception_message,get_ignore_noop,get_token_string,get_ubjson_size_type,get_ubjson_string,get_ubjson_value,key,parse_error,parse_ubjson_internal,start_object] noreturn:[clear,end_object,parse_error]
get_ubjson_high_precision_number call:[concat,create,decltype,exception_message,get,get_number_float,get_number_integer,get_number_unsigned,get_token_string,get_ubjson_size_value,input_adapter,move,number_float,number_integer,number_unsigned,parse_error,push_back,scan,unexpect_eof] noreturn:[parse_error,push_back]
get call:[get_character] noreturn:[get_character]
get_ignore_noop call:[get,while] noreturn:[get]
get_number call:[data,get,memcpy,sizeof,unexpect_eof]
get_string call:[get,push_back,unexpect_eof] noreturn:[push_back]
get_binary call:[get,push_back,unexpect_eof] noreturn:[push_back]
unexpect_eof call:[create,eof,exception_message,parse_error] noreturn:[parse_error]
get_token_string call:[data,size]
exception_message call:[assert,concat] noreturn:[assert,concat]
parser call:[get_token] noreturn:[get_token]
parse call:[assert_invariant,create,exception_message,get_position,get_token,get_token_string,is_discarded,is_errored,parse_error,sax_parse_internal,sdp] noreturn:[assert_invariant,parse_error]
accept call:[sax_parse] noreturn:[sax_parse]
sax_parse call:[create,exception_message,get_position,get_token,get_token_string,parse_error,sax_parse_internal] noreturn:[parse_error]
sax_parse_internal call:[assert,back,boolean,concat,create,empty,end_array,end_object,exception_message,get_number_float,get_number_integer,get_number_unsigned,get_position,get_string,get_token,get_token_string,isfinite,key,null,number_float,number_integer,number_unsigned,parse_error,pop_back,push_back,start_array,start_object,string] noreturn:[parse_error]
get_token call:[scan] noreturn:[scan]
exception_message call:[concat,empty,get_error_message,get_token_string,token_type_name] noreturn:[concat]
get_value
set_begin
set_end
is_begin
is_end
operator==
operator<
operator+
operator-
operator++
operator++
operator--
operator--
operator+=
operator-=
iter_impl call:[assert,iterator,primitive_iterator_t]
iter_impl
operator=
iter_impl
operator=
set_begin call:[assert,begin,set_begin,set_end]
set_end call:[assert,end,set_end]
operator* call:[abort,assert,end,is_begin] noreturn:[abort]
operator-> call:[abort,assert,end,is_begin] noreturn:[abort]
operator++
operator++ call:[advance,assert]
operator--
operator-- call:[advance,assert]
operator== call:[abort,assert,return] noreturn:[abort,return]
operator!= call:[operator==] noreturn:[operator==]
operator< call:[abort,assert,return] noreturn:[abort,return]
operator<= call:[operator<] noreturn:[operator<]
operator> call:[operator<=] noreturn:[operator<=]
operator>= call:[operator<] noreturn:[operator<]
operator+= call:[abort,advance,assert]
operator-= call:[operator+=] noreturn:[operator+=]
operator+
operator+
operator-
operator- call:[abort,assert]
operator[] call:[abort,assert,get_value,next] noreturn:[abort]
key call:[abort,assert,is_object] noreturn:[abort]
value call:[operator*] noreturn:[operator*]
json_reverse_iterator
json_reverse_iterator
operator++ call:[operator++]
operator++ call:[operator++]
operator-- call:[operator--]
operator-- call:[operator--]
operator+= call:[operator+=]
operator+ call:[operator+]
operator- call:[operator-]
operator- call:[base_iterator] noreturn:[base_iterator]
operator[] call:[operator+]
key call:[base,key] noreturn:[key]
value call:[base,operator*] noreturn:[operator*]
json_pointer
to_string call:[accumulate,begin,concat,end,escape] noreturn:[accumulate,concat]
operatorstring_t call:[to_string] noreturn:[to_string]
operator<< call:[to_string]
operator/= call:[begin,end,insert]
operator/= call:[move,push_back]
operator/= call:[to_string] noreturn:[to_string]
operator/ call:[json_pointer]
operator/ call:[json_pointer,move] noreturn:[move]
operator/ call:[json_pointer]
parent_pointer call:[empty,pop_back]
pop_back call:[abort,empty,pop_back] noreturn:[abort,pop_back]
back call:[abort,back,empty] noreturn:[abort,back]
push_back call:[push_back] noreturn:[push_back]
push_back call:[move,push_back] noreturn:[push_back]
empty call:[empty] noreturn:[empty]
array_index call:[abort,c_str,size,strtoull] noreturn:[abort]
top call:[abort,empty] noreturn:[abort]
get_and_create call:[abort,operator[],type] noreturn:[abort,operator[]]
get_unchecked call:[abort,all_of,begin,end,is_null,isdigit,operator[],size,type] noreturn:[abort,isdigit,operator[]]
get_checked call:[abort,at,type] noreturn:[abort]
get_unchecked call:[abort,operator[],type] noreturn:[abort]
get_checked call:[abort,at,type] noreturn:[abort]
contains call:[contains,operator[],size,type]
split call:[abort,assert,empty,find_first_of,push_back,size,substr,unescape] noreturn:[abort,push_back]
flatten call:[concat,empty,escape,flatten,operator[],size,to_string,type] noreturn:[flatten]
unflatten call:[abort,get_and_create,is_object,is_primitive,json_pointer] noreturn:[abort]
convert
convert call:[move]
operator==
operator==
operator==
operator!=
operator!=
operator!=
operator<
json_ref
json_ref
json_ref
json_ref
moved_or_copied call:[move] noreturn:[move]
operator*
operator->
output_vector_adapter
write_character call:[push_back] noreturn:[push_back]
write_characters call:[end,insert] noreturn:[insert]
output_stream_adapter
write_character call:[put] noreturn:[put]
write_characters call:[write] noreturn:[write]
output_string_adapter
write_character call:[push_back] noreturn:[push_back]
write_characters call:[append] noreturn:[append]
output_adapter
output_adapter
output_adapter
operatoroutput_adapter_t
binary_writer call:[assert] noreturn:[assert]
write_bson call:[abort,type,write_bson_object] noreturn:[abort]
write_cbor call:[c_str,data,has_subtype,isinf,isnan,size,subtype,to_char_type,type,write_cbor,write_character,write_characters,write_compact_float,write_number] noreturn:[write_cbor,write_character,write_compact_float,write_number]
write_msgpack call:[c_str,data,has_subtype,size,subtype,to_char_type,type,write_character,write_characters,write_compact_float,write_msgpack,write_number] noreturn:[write_msgpack,write_number]
write_ubjson call:[all_of,assert,begin,c_str,data,empty,end,find,front,size,to_char_type,type,ubjson_prefix,write_bjdata_ndarray,write_character,write_characters,write_number_with_ubjson_prefix,write_ubjson] noreturn:[write_character,write_characters,write_number_with_ubjson_prefix,write_ubjson]
calc_bson_entry_header_size call:[abort,find,size]
write_bson_entry_header call:[c_str,size,to_char_type,write_character,write_characters] noreturn:[write_characters]
write_bson_boolean call:[to_char_type,write_bson_entry_header,write_character] noreturn:[write_character]
write_bson_double call:[write_bson_entry_header]
calc_bson_string_size call:[size,sizeof]
write_bson_string call:[c_str,size,write_bson_entry_header,write_characters] noreturn:[write_characters]
write_bson_null call:[write_bson_entry_header] noreturn:[write_bson_entry_header]
calc_bson_integer_size call:[return,sizeof] noreturn:[sizeof]
write_bson_integer call:[write_bson_entry_header]
calc_bson_unsigned_size call:[return,sizeof] noreturn:[sizeof]
write_bson_unsigned call:[abort,write_bson_entry_header] noreturn:[abort]
write_bson_object_entry call:[write_bson_entry_header,write_bson_object] noreturn:[write_bson_object]
calc_bson_array_size call:[accumulate,begin,calc_bson_element_size,end,sizeof,to_string] noreturn:[calc_bson_element_size]
calc_bson_binary_size call:[size,sizeof]
write_bson_array call:[calc_bson_array_size,to_char_type,to_string,write_bson_element,write_bson_entry_header,write_character] noreturn:[write_bson_element,write_character]
write_bson_binary call:[data,has_subtype,size,subtype,write_bson_entry_header,write_characters,write_number] noreturn:[write_characters]
calc_bson_element_size call:[assert,calc_bson_array_size,calc_bson_binary_size,calc_bson_entry_header_size,calc_bson_integer_size,calc_bson_object_size,calc_bson_string_size,calc_bson_unsigned_size,type]
write_bson_element call:[assert,type,write_bson_array,write_bson_binary,write_bson_boolean,write_bson_double,write_bson_integer,write_bson_null,write_bson_object_entry,write_bson_string,write_bson_unsigned]
calc_bson_object_size call:[accumulate,begin,calc_bson_element_size,end,sizeof] noreturn:[calc_bson_element_size]
write_bson_object call:[calc_bson_object_size,to_char_type,write_bson_element,write_character] noreturn:[write_bson_element,write_character]
get_cbor_float_prefix call:[to_char_type] noreturn:[to_char_type]
get_cbor_float_prefix call:[to_char_type] noreturn:[to_char_type]
get_msgpack_float_prefix call:[to_char_type] noreturn:[to_char_type]
get_msgpack_float_prefix call:[to_char_type] noreturn:[to_char_type]
write_number_with_ubjson_prefix call:[get_ubjson_float_prefix,write_character,write_number] noreturn:[write_character,write_number]
write_number_with_ubjson_prefix call:[BasicJsonType,dump,size,to_char_type,write_character,write_number,write_number_with_ubjson_prefix] noreturn:[write_character,write_number]
write_number_with_ubjson_prefix call:[BasicJsonType,dump,size,to_char_type,write_character,write_number,write_number_with_ubjson_prefix] noreturn:[write_character,write_number]
ubjson_prefix call:[get_ubjson_float_prefix,type]
get_ubjson_float_prefix
get_ubjson_float_prefix
write_bjdata_ndarray call:[at,empty,end,find,size,write_character,write_number,write_ubjson] noreturn:[write_number]
write_number call:[begin,data,end,memcpy,reverse,sizeof,write_characters] noreturn:[reverse,write_characters]
write_compact_float call:[get_cbor_float_prefix,get_msgpack_float_prefix,lowest,write_character,write_number] noreturn:[write_number]
to_char_type
to_char_type call:[memcpy,sizeof,static_assert]
to_char_type
to_char_type
reinterpret_bits call:[memcpy,sizeof,static_assert]
diyfp
sub call:[assert]
mul call:[static_assert]
normalize call:[assert]
normalize_to call:[assert]
compute_boundaries call:[assert,diyfp,isfinite,normalize,normalize_to,static_assert]
get_cached_power_for_binary_exponent call:[assert,size]
find_largest_pow10
grisu2_round call:[assert]
grisu2_digit_gen call:[assert,find_largest_pow10,grisu2_round,one,static_assert,sub] noreturn:[grisu2_round]
grisu2 call:[M_minus,M_plus,assert,c_minus_k,get_cached_power_for_binary_exponent,grisu2_digit_gen,mul] noreturn:[grisu2_digit_gen]
grisu2 call:[assert,compute_boundaries,grisu2,isfinite,static_assert] noreturn:[grisu2]
append_exponent call:[assert]
format_buffer call:[append_exponent,assert,memmove,memset] noreturn:[append_exponent]
to_chars call:[assert,format_buffer,grisu2,isfinite,signbit] noreturn:[format_buffer]
serializer
dump call:[assert,back,c_str,cbegin,cend,dump,dump_escaped,dump_float,dump_integer,empty,has_subtype,next,resize,size,subtype,write_character,write_characters] noreturn:[assert,dump_integer,resize,write_character,write_characters]
dump_escaped call:[abort,assert,data,decode,size,to_char_type,write_characters] noreturn:[abort,assert,to_char_type,write_characters]
count_digits
hex_bytes
is_negative_number
is_negative_number
dump_integer call:[assert,begin,count_digits,data,is_negative_number,remove_sign,size,write_character,write_characters] noreturn:[count_digits,write_characters]
dump_float call:[dump_float,isfinite,write_characters] noreturn:[dump_float]
dump_float call:[data,size,to_chars,write_characters] noreturn:[write_characters]
dump_float call:[assert,begin,data,end,fill,find,none_of,remove,size,write_characters] noreturn:[begin,write_characters]
decode call:[assert,size]
remove_sign call:[assert]
remove_sign call:[assert]
ordered_map
ordered_map
ordered_map
ordered_map
emplace call:[begin,emplace_back,end,m_compare,prev]
emplace call:[begin,emplace_back,end,m_compare,prev]
operator[] call:[emplace]
operator[] call:[emplace]
operator[] call:[at] noreturn:[at]
operator[] call:[at] noreturn:[at]
at call:[abort,begin,end,m_compare] noreturn:[abort]
at call:[abort,begin,end,m_compare] noreturn:[abort]
at call:[abort,begin,end,m_compare] noreturn:[abort]
at call:[abort,begin,end,m_compare] noreturn:[abort]
erase call:[begin,end,m_compare,move,new,pop_back,value_type]
erase call:[begin,end,m_compare,move,new,pop_back,value_type]
erase call:[erase,next] noreturn:[erase]
erase call:[begin,distance,end,move,new,next,resize,size,value_type]
count call:[begin,end,m_compare]
count call:[begin,end,m_compare]
find call:[begin,end,m_compare] noreturn:[end]
find call:[begin,end,m_compare] noreturn:[end]
find call:[begin,end,m_compare] noreturn:[end]
insert call:[emplace,move] noreturn:[emplace]
insert call:[begin,end,m_compare,push_back]
insert call:[insert] noreturn:[insert]
parser call:[move]
get_allocator call:[allocator_type] noreturn:[allocator_type]
meta call:[concat,to_string]
create call:[allocate,assert,construct,deallocate,decltype,get,obj,release] noreturn:[deallocate,release]
json_value
json_value
json_value
json_value
json_value call:[abort] noreturn:[abort]
json_value
json_value
json_value
json_value
json_value
json_value
json_value
json_value
json_value
json_value
destroy call:[back,back_inserter,begin,clear,current_item,deallocate,decltype,destroy,empty,end,is_array,is_object,move,pop_back,push_back,reserve,size] noreturn:[clear,move,push_back]
assert_invariant call:[assert]
set_parents
set_parents
set_parent
basic_json call:[assert_invariant] noreturn:[assert_invariant]
basic_json call:[assert_invariant] noreturn:[assert_invariant]
basic_json call:[assert_invariant,set_parents,to_json] noreturn:[assert_invariant]
basic_json call:[assert,assert_invariant,set_parents,to_json,type] noreturn:[assert,assert_invariant]
basic_json call:[abort,all_of,assert_invariant,begin,emplace,end,is_array,is_string,move,moved_or_copied,set_parents,size] noreturn:[abort,assert_invariant,emplace,is_string]
binary call:[basic_json]
binary call:[basic_json,binary_t]
binary call:[basic_json,move]
binary call:[basic_json,binary_t,move]
array call:[basic_json] noreturn:[basic_json]
object call:[basic_json] noreturn:[basic_json]
basic_json call:[assert_invariant,set_parents] noreturn:[assert_invariant]
basic_json call:[abort,assert,assert_invariant,is_begin,is_end,set_parents] noreturn:[abort,assert_invariant]
basic_json
basic_json call:[assert_invariant,set_parents] noreturn:[assert_invariant]
basic_json call:[assert_invariant,set_parents] noreturn:[assert_invariant]
operator= call:[assert_invariant,set_parents,swap]
basic_json call:[assert_invariant,destroy] noreturn:[destroy]
dump call:[dump,s] noreturn:[dump]
type
is_primitive call:[is_binary,is_boolean,is_null,is_number,is_string] noreturn:[is_binary]
is_structured call:[is_array,is_object] noreturn:[is_object]
is_null
is_boolean
is_number call:[is_number_float,is_number_integer] noreturn:[is_number_float]
is_number_integer
is_number_unsigned
is_number_float
is_object
is_array
is_string
is_binary
is_discarded
operatorvalue_t
get_impl call:[abort,is_boolean] noreturn:[abort]
get_impl_ptr call:[is_object]
get_impl_ptr call:[is_object]
get_impl_ptr call:[is_array]
get_impl_ptr call:[is_array]
get_impl_ptr call:[is_string]
get_impl_ptr call:[is_string]
get_impl_ptr call:[is_boolean]
get_impl_ptr call:[is_boolean]
get_impl_ptr call:[is_number_integer]
get_impl_ptr call:[is_number_integer]
get_impl_ptr call:[is_number_unsigned]
get_impl_ptr call:[is_number_unsigned]
get_impl_ptr call:[is_number_float]
get_impl_ptr call:[is_number_float]
get_impl_ptr call:[is_binary]
get_impl_ptr call:[is_binary]
get_ref_impl call:[abort] noreturn:[abort]
get_ptr call:[get_impl_ptr] noreturn:[get_impl_ptr]
get_ptr call:[get_impl_ptr] noreturn:[get_impl_ptr]
get_impl call:[ValueType,from_json]
get_impl call:[from_json] noreturn:[from_json]
get_impl
get_impl
get_impl
get call:[static_assert]
get
get_to call:[from_json]
get_to
get_to call:[from_json]
get_ref
get_ref
operatorValueType
get_binary call:[abort,is_binary] noreturn:[abort]
get_binary call:[abort,is_binary] noreturn:[abort]
at call:[abort,at,is_array,set_parent] noreturn:[abort,set_parent]
at call:[abort,at,is_array] noreturn:[abort,at]
at call:[abort,end,find,is_object,set_parent] noreturn:[abort,set_parent]
at call:[abort,end,find,is_object,set_parent] noreturn:[abort,set_parent]
at call:[abort,end,find,is_object] noreturn:[abort]
at call:[abort,end,find,is_object] noreturn:[abort]
operator[] call:[abort,assert_invariant,is_array,is_null,operator[],resize,size] noreturn:[abort,assert_invariant,operator[]]
operator[] call:[abort,is_array,operator[]] noreturn:[abort,operator[]]
operator[] call:[abort,assert_invariant,emplace,is_null,is_object,move,set_parent] noreturn:[abort,assert_invariant,set_parent]
operator[] call:[abort,assert,end,find,is_object] noreturn:[abort]
operator[] call:[key_type,operator[]] noreturn:[operator[]]
operator[] call:[key_type,operator[]] noreturn:[operator[]]
operator[] call:[abort,assert_invariant,emplace,is_null,is_object,set_parent] noreturn:[abort,assert_invariant,set_parent]
operator[] call:[abort,assert,end,find,is_object] noreturn:[abort]
value call:[abort,end,find,is_object] noreturn:[abort]
value call:[abort,end,find,is_object] noreturn:[abort]
value call:[abort,end,find,is_object] noreturn:[abort]
value call:[abort,end,find,is_object] noreturn:[abort]
value call:[abort,get_checked,is_object] noreturn:[abort]
value call:[abort,get_checked,is_object] noreturn:[abort]
value call:[convert,value] noreturn:[value]
value call:[convert,value] noreturn:[value]
front call:[begin] noreturn:[begin]
front call:[cbegin] noreturn:[cbegin]
back call:[end]
back call:[cend]
erase call:[abort,assert_invariant,deallocate,decltype,destroy,end,erase,is_begin,is_binary,is_string] noreturn:[abort]
erase call:[abort,assert_invariant,deallocate,decltype,destroy,end,erase,is_begin,is_binary,is_end,is_string] noreturn:[abort]
erase_internal call:[abort,erase,is_object] noreturn:[abort,erase]
erase_internal call:[abort,end,erase,find,is_object] noreturn:[abort]
erase call:[erase_internal] noreturn:[erase_internal]
erase call:[erase_internal] noreturn:[erase_internal]
erase call:[abort,begin,erase,is_array,size] noreturn:[abort,erase]
find call:[end,find,is_object] noreturn:[find]
find call:[cend,find,is_object] noreturn:[find]
find call:[end,find,is_object] noreturn:[find]
find call:[cend,find,is_object] noreturn:[find]
count call:[count,is_object]
count call:[count,is_object]
contains call:[end,find,is_object] noreturn:[end]
contains call:[end,find,is_object] noreturn:[end]
contains call:[contains] noreturn:[contains]
contains call:[contains] noreturn:[contains]
begin call:[result,set_begin]
begin call:[cbegin] noreturn:[cbegin]
cbegin call:[result,set_begin]
end call:[result,set_end]
end call:[cend] noreturn:[cend]
cend call:[result,set_end]
rbegin call:[end,reverse_iterator] noreturn:[reverse_iterator]
rbegin call:[crbegin] noreturn:[crbegin]
rend call:[begin,reverse_iterator] noreturn:[reverse_iterator]
rend call:[crend] noreturn:[crend]
crbegin call:[cend,const_reverse_iterator] noreturn:[const_reverse_iterator]
crend call:[cbegin,const_reverse_iterator] noreturn:[const_reverse_iterator]
iterator_wrapper call:[items] noreturn:[items]
iterator_wrapper call:[items] noreturn:[items]
items
items
empty call:[empty] noreturn:[empty]
size call:[size] noreturn:[size]
max_size call:[max_size,size] noreturn:[max_size,size]
clear call:[clear]
push_back call:[abort,assert_invariant,back,capacity,is_array,is_null,move,push_back,set_parent] noreturn:[abort,assert_invariant,set_parent]
operator+= call:[move,push_back]
push_back call:[abort,assert_invariant,back,capacity,is_array,is_null,push_back,set_parent] noreturn:[abort,assert_invariant,set_parent]
operator+= call:[push_back]
push_back call:[abort,assert_invariant,insert,is_null,is_object,set_parent] noreturn:[abort,assert_invariant,set_parent]
operator+= call:[push_back]
push_back call:[basic_json,begin,is_object,is_string,move,moved_or_copied,push_back,size,value_type] noreturn:[push_back]
operator+= call:[push_back]
emplace_back call:[abort,assert_invariant,back,capacity,emplace_back,is_array,is_null,set_parent] noreturn:[abort,assert_invariant,set_parent]
emplace call:[abort,assert_invariant,begin,emplace,is_null,is_object,set_parent] noreturn:[abort,assert_invariant]
insert_iterator call:[assert,begin,distance,insert,result,set_parents]
insert call:[abort,insert_iterator,is_array] noreturn:[abort,insert_iterator]
insert call:[insert] noreturn:[insert]
insert call:[abort,insert_iterator,is_array] noreturn:[abort,insert_iterator]
insert call:[abort,insert_iterator,is_array] noreturn:[abort,insert_iterator]
insert call:[abort,begin,end,insert_iterator,is_array] noreturn:[abort,insert_iterator]
insert call:[abort,insert,is_object] noreturn:[abort,insert]
update call:[begin,end,update] noreturn:[update]
update call:[abort,assert_invariant,end,find,is_null,is_object,key,operator[],update,value] noreturn:[abort,assert_invariant,value]
swap call:[assert_invariant,set_parents,swap] noreturn:[assert_invariant]
swap call:[swap] noreturn:[swap]
swap call:[abort,is_array,swap] noreturn:[abort,swap]
swap call:[abort,is_object,swap] noreturn:[abort,swap]
swap call:[abort,is_string,swap] noreturn:[abort,swap]
swap call:[abort,is_binary,swap] noreturn:[abort,swap]
swap call:[abort,is_binary,swap] noreturn:[abort,swap]
compares_unordered call:[is_discarded,is_number,is_number_float,isnan] noreturn:[is_discarded]
compares_unordered call:[compares_unordered] noreturn:[compares_unordered]
operator== call:[compares_unordered,return,type] noreturn:[return]
operator== call:[basic_json] noreturn:[basic_json]
operator== call:[basic_json]
operator!= call:[compares_unordered]
operator!= call:[basic_json] noreturn:[basic_json]
operator!= call:[basic_json]
operator< call:[compares_unordered,operator<,return,type] noreturn:[return]
operator< call:[basic_json] noreturn:[basic_json]
operator< call:[basic_json]
operator<= call:[compares_unordered]
operator<= call:[basic_json] noreturn:[basic_json]
operator<= call:[basic_json]
operator> call:[compares_unordered]
operator> call:[basic_json] noreturn:[basic_json]
operator> call:[basic_json]
operator>= call:[compares_unordered]
operator>= call:[basic_json] noreturn:[basic_json]
operator>= call:[basic_json]
operator<< call:[dump,fill,s,width]
operator>>
parse call:[input_adapter,parse,parser]
parse call:[input_adapter,move,parse,parser]
parse call:[get,parse,parser]
accept call:[accept,input_adapter,parser] noreturn:[accept]
accept call:[accept,input_adapter,move,parser] noreturn:[accept]
accept call:[accept,get,parser] noreturn:[accept]
sax_parse call:[decltype,input_adapter,move,parser,sax_parse] noreturn:[sax_parse]
sax_parse call:[decltype,input_adapter,move,parser,sax_parse] noreturn:[sax_parse]
sax_parse call:[decltype,get,move,parser,sax_parse] noreturn:[sax_parse]
operator<< call:[operator>>] noreturn:[operator>>]
operator>> call:[input_adapter,parse,parser]
type_name
to_cbor call:[to_cbor]
to_cbor call:[write_cbor] noreturn:[write_cbor]
to_cbor call:[write_cbor] noreturn:[write_cbor]
to_msgpack call:[to_msgpack]
to_msgpack call:[write_msgpack] noreturn:[write_msgpack]
to_msgpack call:[write_msgpack] noreturn:[write_msgpack]
to_ubjson call:[to_ubjson]
to_ubjson call:[write_ubjson] noreturn:[write_ubjson]
to_ubjson call:[write_ubjson] noreturn:[write_ubjson]
to_bjdata call:[to_bjdata]
to_bjdata call:[write_ubjson] noreturn:[write_ubjson]
to_bjdata call:[write_ubjson] noreturn:[write_ubjson]
to_bson call:[to_bson]
to_bson call:[write_bson] noreturn:[write_bson]
to_bson call:[write_bson] noreturn:[write_bson]
from_cbor call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_cbor call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_cbor call:[from_cbor] noreturn:[from_cbor]
from_cbor call:[basic_json,decltype,get,move,sax_parse,sdp] noreturn:[basic_json]
from_msgpack call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_msgpack call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_msgpack call:[from_msgpack] noreturn:[from_msgpack]
from_msgpack call:[basic_json,decltype,get,move,sax_parse,sdp] noreturn:[basic_json]
from_ubjson call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_ubjson call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_ubjson call:[from_ubjson] noreturn:[from_ubjson]
from_ubjson call:[basic_json,decltype,get,move,sax_parse,sdp] noreturn:[basic_json]
from_bjdata call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_bjdata call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_bson call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_bson call:[basic_json,decltype,input_adapter,move,sax_parse,sdp] noreturn:[basic_json]
from_bson call:[from_bson] noreturn:[from_bson]
from_bson call:[basic_json,decltype,get,move,sax_parse,sdp] noreturn:[basic_json]
operator[] call:[get_unchecked] noreturn:[get_unchecked]
operator[] call:[get_unchecked] noreturn:[get_unchecked]
operator[] call:[get_unchecked] noreturn:[get_unchecked]
operator[] call:[get_unchecked] noreturn:[get_unchecked]
at call:[get_checked] noreturn:[get_checked]
at call:[get_checked] noreturn:[get_checked]
at call:[get_checked] noreturn:[get_checked]
at call:[get_checked] noreturn:[get_checked]
flatten call:[flatten,result]
unflatten call:[unflatten] noreturn:[unflatten]
patch_inplace call:[abort,assert,at,back,begin,concat,empty,end,erase,find,from_ptr,get_op,get_value,insert,is_array,is_object,is_string,operation_add,operation_remove,pop_back,ptr,push_back,size,top] noreturn:[abort,assert,at,erase,get_value,insert,push_back]
patch call:[patch_inplace]
diff call:[begin,cbegin,cend,concat,diff,end,escape,find,insert,key,object,push_back,result,size,to_string,type,value] noreturn:[insert,push_back]
merge_patch call:[begin,end,erase,is_null,is_object,key,merge_patch,object,operator[],value] noreturn:[erase,merge_patch,object]
to_string call:[dump] noreturn:[dump]
operator""_json call:[parse] noreturn:[parse]
operator""_json_pointer call:[json_pointer,string] noreturn:[json_pointer]
operator() call:[hash] noreturn:[hash]
operator() call:[operator<] noreturn:[operator<]
Ressources
Ressources
operator+=
TankStats
TankStats
operator+=
ImVec2
ImVec2
operator[] call:[assert,return]
operator[] call:[assert,return]
ImVec4
ImVec4
operatornew
operatordelete
IM_DELETE call:[MemFree,T] noreturn:[MemFree]
SelectAll
ClearSelection
HasSelection
ImGuiPayload call:[Clear] noreturn:[Clear]
Clear call:[memset,sizeof]
IsDataType call:[strcmp]
IsPreview
IsDelivery
ImGuiTableColumnSortSpecs call:[memset,sizeof] noreturn:[memset]
ImGuiTableSortSpecs call:[memset,sizeof] noreturn:[memset]
ImGuiOnceUponAFrame
operatorbool call:[GetFrameCount]
Clear call:[Build] noreturn:[Build]
IsActive call:[empty] noreturn:[empty]
ImGuiTextRange
ImGuiTextRange
empty
ImGuiTextBuffer
operator[] call:[assert]
begin call:[front]
end call:[back]
size
empty
clear call:[clear] noreturn:[clear]
reserve call:[reserve] noreturn:[reserve]
c_str
ImGuiStoragePair
ImGuiStoragePair
ImGuiStoragePair
Clear call:[clear] noreturn:[clear]
ImGuiListClipper call:[Begin,memset,sizeof] noreturn:[Begin]
ImColor
ImColor
ImColor
ImColor
ImColor
operatorImU32 call:[ColorConvertFloat4ToU32] noreturn:[ColorConvertFloat4ToU32]
operatorImVec4
SetHSV call:[ColorConvertHSVtoRGB]
HSV call:[ColorConvertHSVtoRGB,ImColor] noreturn:[ImColor]
ImDrawCmd call:[memset,sizeof] noreturn:[memset]
GetTexID
ImDrawListSplitter call:[memset,sizeof] noreturn:[memset]
ImDrawListSplitter call:[ClearFreeMemory] noreturn:[ClearFreeMemory]
Clear
ImDrawList call:[memset,sizeof]
ImDrawList call:[_ClearFreeMemory] noreturn:[_ClearFreeMemory]
GetClipRectMin call:[ImVec2,back] noreturn:[ImVec2]
GetClipRectMax call:[ImVec2,back] noreturn:[ImVec2]
PathClear
PathLineTo call:[push_back] noreturn:[push_back]
PathLineToMergeDuplicate call:[memcmp,push_back] noreturn:[push_back]
PathFillConvex call:[AddConvexPolyFilled]
PathStroke call:[AddPolyline]
ChannelsSplit call:[Split] noreturn:[Split]
ChannelsMerge call:[Merge] noreturn:[Merge]
ChannelsSetCurrent call:[SetCurrentChannel] noreturn:[SetCurrentChannel]
PrimWriteVtx
PrimWriteIdx
PrimVtx call:[PrimWriteIdx,PrimWriteVtx] noreturn:[PrimWriteVtx]
ImDrawData call:[Clear] noreturn:[Clear]
Clear call:[memset,sizeof] noreturn:[memset]
ImFontGlyphRangesBuilder call:[Clear] noreturn:[Clear]
Clear call:[memset,resize,sizeof] noreturn:[memset]
GetBit call:[return]
SetBit
AddChar call:[SetBit] noreturn:[SetBit]
ImFontAtlasCustomRect call:[ImVec2]
IsPacked
IsBuilt
SetTexID
GetCustomRectByIndex call:[assert]
GetCharAdvance call:[return]
IsLoaded
GetDebugName
ImGuiViewport call:[memset,sizeof] noreturn:[memset]
GetCenter call:[ImVec2] noreturn:[ImVec2]
GetWorkCenter call:[ImVec2] noreturn:[ImVec2]
ImGuiPlatformImeData call:[memset,sizeof] noreturn:[memset]
PushAllowKeyboardFocus call:[PushTabStop] noreturn:[PushTabStop]
PopAllowKeyboardFocus call:[PopTabStop] noreturn:[PopTabStop]
CaptureKeyboardFromApp call:[SetNextFrameWantCaptureKeyboard] noreturn:[SetNextFrameWantCaptureKeyboard]
CaptureMouseFromApp call:[SetNextFrameWantCaptureMouse] noreturn:[SetNextFrameWantCaptureMouse]
GetWindowContentRegionWidth call:[GetWindowContentRegionMax,GetWindowContentRegionMin]
ListBoxHeader call:[BeginListBox] noreturn:[BeginListBox]
ListBoxFooter call:[EndListBox] noreturn:[EndListBox]
ImPlotPoint
ImPlotPoint
ImPlotPoint
operator[] call:[return]
operator[] call:[return]
ImPlotRange
ImPlotRange
Contains
Size
Clamp call:[return]
ImPlotRect
ImPlotRect
Contains call:[Contains] noreturn:[Contains]
Contains call:[Contains] noreturn:[Contains]
Size call:[ImPlotPoint,Size] noreturn:[ImPlotPoint]
Clamp call:[Clamp] noreturn:[Clamp]
Clamp call:[Clamp,ImPlotPoint] noreturn:[ImPlotPoint]
Min call:[ImPlotPoint] noreturn:[ImPlotPoint]
Max call:[ImPlotPoint] noreturn:[ImPlotPoint]
select_randomly call:[advance,dis,distance]
select_randomly call:[gen,rd,select_randomly] noreturn:[select_randomly]
getRandomInt call:[rd,rng,uni] noreturn:[uni]
hash
LoadTextureFromFile call:[glBindTexture,glGenTextures,glTexImage2D,glTexParameteri,stbi_image_free,stbi_load]
loadTranslation call:[c_str,clear,getline,hash,infile,insert,iss,push_back] noreturn:[insert,push_back]
loadConverter call:[c_str,clear,directory_iterator,getline,hash,infile,insert,iss,path,push_back] noreturn:[insert,push_back]
Engine
typeToString
PlaneEngine
PlaneEngine
typeToString
stringToType
stringToVersion
engineToImageString call:[format]
engineToEquipmentValueString call:[format,typeToString] noreturn:[format]
roleToString
versionToString
stringToVersion
versionToYear
versionToFileString
PlaneModule
PlaneModule
PlaneModule
PlaneModule
typeToFileString
stringToSubType
versionToString
stringToVersion
subTypeToString
typeToImagesString call:[format,typeToString] noreturn:[format]
moduleToEquipmentStringValue call:[format,typeToString]
Plane
generateRandomPlane call:[Plane,generateFixedModule,generateRandom,generateSpecialModule,getTypeByRole,srand,time] noreturn:[Plane]
getTypeByRole call:[rand]
generateSpecialModule
generateFixedModule call:[begin,end,fun,generateNone,generateRandom,push_back,select_randomly,srand,time] noreturn:[generateRandom,push_back]
ImVector < unsigned short >
ImVector < unsigned short > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < unsigned short > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[clear,short] noreturn:[clear,short]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImGuiTextRange >
ImVector < ImGuiTextRange > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImGuiTextRange > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImGuiTextRange,clear] noreturn:[ImGuiTextRange,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < char >
ImVector < char > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < char > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[char,clear] noreturn:[char,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImGuiStoragePair >
ImVector < ImGuiStoragePair > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImGuiStoragePair > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImGuiStoragePair,clear] noreturn:[ImGuiStoragePair,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImDrawCmd >
ImVector < ImDrawCmd > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImDrawCmd > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImDrawCmd,clear] noreturn:[ImDrawCmd,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImDrawChannel >
ImVector < ImDrawChannel > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImDrawChannel > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImDrawChannel,clear] noreturn:[ImDrawChannel,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImDrawVert >
ImVector < ImDrawVert > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImDrawVert > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImDrawVert,clear] noreturn:[ImDrawVert,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImVec4 >
ImVector < ImVec4 > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImVec4 > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImVec4,clear] noreturn:[ImVec4,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < void * >
ImVector < void * > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < void * > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[clear] noreturn:[clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImVec2 >
ImVector < ImVec2 > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImVec2 > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImVec2,clear] noreturn:[ImVec2,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < unsigned int >
ImVector < unsigned int > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < unsigned int > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[clear,int] noreturn:[clear,int]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImFont * >
ImVector < ImFont * > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImFont * > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[clear] noreturn:[clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImFontAtlasCustomRect >
ImVector < ImFontAtlasCustomRect > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImFontAtlasCustomRect > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImFontAtlasCustomRect,clear] noreturn:[ImFontAtlasCustomRect,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImFontConfig >
ImVector < ImFontConfig > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImFontConfig > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImFontConfig,clear] noreturn:[ImFontConfig,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < float >
ImVector < float > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < float > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[clear,float] noreturn:[clear,float]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
ImVector < ImFontGlyph >
ImVector < ImFontGlyph > call:[operator=] noreturn:[operator=]
operator= call:[clear,memcpy,resize,sizeof] noreturn:[memcpy]
ImVector < ImFontGlyph > call:[MemFree] noreturn:[MemFree]
clear call:[MemFree]
clear_delete call:[IM_DELETE,clear] noreturn:[IM_DELETE,clear]
clear_destruct call:[ImFontGlyph,clear] noreturn:[ImFontGlyph,clear]
empty
size
size_in_bytes call:[sizeof] noreturn:[sizeof]
max_size call:[sizeof] noreturn:[sizeof]
capacity
operator[] call:[assert]
operator[] call:[assert]
begin
begin
end
end
front call:[assert]
front call:[assert]
back call:[assert]
back call:[assert]
swap
_grow_capacity
resize call:[_grow_capacity,reserve] noreturn:[reserve]
resize call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[memcpy,reserve]
shrink call:[assert]
reserve call:[MemAlloc,MemFree,memcpy,sizeof] noreturn:[MemFree]
reserve_discard call:[MemAlloc,MemFree,sizeof] noreturn:[MemFree]
push_back call:[_grow_capacity,memcpy,reserve,sizeof] noreturn:[reserve]
pop_back call:[assert]
push_front call:[insert,push_back] noreturn:[insert,push_back]
erase call:[assert,memmove,sizeof]
erase call:[assert,memmove,sizeof]
erase_unsorted call:[assert,memcpy,sizeof] noreturn:[memcpy]
insert call:[_grow_capacity,assert,memcpy,memmove,reserve,sizeof] noreturn:[memmove,reserve]
contains
find
find
find_erase call:[erase,find]
find_erase_unsorted call:[erase_unsorted,find]
index_from_ptr call:[assert,return]
